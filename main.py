import asyncio
import logging
import sys
import os
import base64
import json
from io import BytesIO, StringIO
from PIL import Image
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from typing import Optional
import sqlite3
from datetime import datetime
import csv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"

logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    sys.exit(1)
else:
    logger.info(f"‚úÖ Telegram —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω (–¥–ª–∏–Ω–∞: {len(TELEGRAM_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤)")

if not OPENAI_API_KEY:
    logger.error("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    sys.exit(1)
else:
    logger.info(f"‚úÖ OpenAI —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω (–¥–ª–∏–Ω–∞: {len(OPENAI_API_KEY)} —Å–∏–º–≤–æ–ª–æ–≤)")
    logger.info(f"üîó OpenAI API URL: {OPENAI_API_URL}")

class ImageAnalysisBot:
    def __init__(self):
        logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...")
        try:
            # –°–æ–∑–¥–∞–µ–º application —Å –æ–±—ã—á–Ω—ã–º Updater
            self.application = Application.builder().token(TELEGRAM_TOKEN).build()
            logger.info("‚úÖ Telegram Application —Å–æ–∑–¥–∞–Ω")
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
            self.db_path = 'image_analysis_results.db'
            self.init_db()
            self.setup_handlers()
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
            raise
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("results", self.results_command))
        self.application.add_handler(CommandHandler("export", self.export_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    def init_db(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS file_parse_results (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    file_name TEXT NOT NULL,
                    full_text TEXT NOT NULL,
                    parsed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            conn.commit()
            conn.close()
            logger.info("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü–∞ file_parse_results –≥–æ—Ç–æ–≤—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)

    def save_parse_result(self, file_name: str, full_text: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO file_parse_results (file_name, full_text) VALUES (?, ?)',
                (file_name, full_text)
            )
            conn.commit()
            conn.close()
            logger.info("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: %s", file_name)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ë–î: {e}", exc_info=True)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.info(f"üìù –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user.username} ({user.id})")
        
        welcome_message = (
            f"üëã Hello, {user.first_name}!\n\n"
            "üñºÔ∏è I extract text from images using OpenAI GPT-4o Vision!\n\n"
            "üì∑ Send me any image with text, and I will:\n"
            "‚Ä¢ Extract all text and numbers from the image\n"
            "‚Ä¢ Provide clean text results\n\n"
            "üí° Available commands:\n"
            "‚Ä¢ /start - Show this message\n"
            "‚Ä¢ /help - Help guide\n"
            "‚Ä¢ /status - Bot status"
        )
        
        try:
            await update.message.reply_text(welcome_message)
            logger.info(f"‚úÖ Welcome message sent to user {user.id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user = update.effective_user
        logger.info(f"üìö –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç {user.username} ({user.id})")
        
        help_message = (
            "üÜò Bot Usage Guide:\n\n"
            "üì∑ **Text Extraction from Images:**\n"
            "‚Ä¢ Send any image with text\n"
            "‚Ä¢ Get all extracted text and numbers\n"
            "‚Ä¢ Support for any images containing text\n\n"
            "üîß **Technical Details:**\n"
            "‚Ä¢ AI Model: OpenAI GPT-4o Vision\n"
            "‚Ä¢ OCR: High-precision text extraction\n"
            "‚Ä¢ Maximum size: 20MB\n"
            "‚Ä¢ Supported formats: JPG, PNG, PDF\n\n"
            "‚ùì **Commands:**\n"
            "‚Ä¢ /start - Start working\n"
            "‚Ä¢ /help - This help guide\n"
            "‚Ä¢ /status - Check status"
        )
        
        try:
            await update.message.reply_text(help_message, parse_mode='Markdown')
            logger.info(f"‚úÖ Help guide sent to user {user.id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–∫–∏: {e}")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user = update.effective_user
        logger.info(f"‚ö° –ö–æ–º–∞–Ω–¥–∞ /status –æ—Ç {user.username} ({user.id})")
        
        status_message = (
            "üü¢ Bot is working normally!\n\n"
            "üîß **Component Status:**\n"
            "‚Ä¢ Telegram API: ‚úÖ Connected\n"
            "‚Ä¢ OpenAI API: ‚úÖ Available\n"
            "‚Ä¢ GPT-4o Vision: ‚úÖ Active\n\n"
            "üìä **Information:**\n"
            "‚Ä¢ AI Model: OpenAI GPT-4o Vision\n"
            "‚Ä¢ Function: OCR (text extraction)\n"
            "‚Ä¢ Bot Version: 4.1"
        )
        
        try:
            await update.message.reply_text(status_message)
            logger.info(f"‚úÖ Status sent to user {user.id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def results_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∏–º—è —Ñ–∞–π–ª–∞, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞, –¥–∞—Ç–∞)"""
        user = update.effective_user
        logger.info(f"üìö –ö–æ–º–∞–Ω–¥–∞ /results –æ—Ç {user.username} ({user.id})")

        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                """
                SELECT id, file_name, LENGTH(full_text) AS text_len, parsed_at
                FROM file_parse_results
                ORDER BY id DESC
                LIMIT 5
                """
            )
            rows = cursor.fetchall()
            conn.close()

            if not rows:
                await update.message.reply_text("–ü–æ–∫–∏ —â–æ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î. –ù–∞–¥—ñ—à–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É.")
                return

            lines = ["–û—Å—Ç–∞–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (–º–∞–∫—Å. 5):\n"]
            for rid, fname, tlen, ts in rows:
                lines.append(f"#{rid} | {ts} | {fname} | {tlen} —Å–∏–º–≤–æ–ª—ñ–≤")

            await update.message.reply_text("\n".join(lines))
            logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", user.id)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /results: {e}", exc_info=True)
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –±–∞–∑–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")

    async def export_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ —Ñ–∞–π–ª"""
        user = update.effective_user
        logger.info(f"üìö –ö–æ–º–∞–Ω–¥–∞ /export –æ—Ç {user.username} ({user.id})")

        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                """
                SELECT parsed_at, file_name, full_text
                FROM file_parse_results
                ORDER BY id
                """
            )
            rows = cursor.fetchall()
            conn.close()

            if not rows:
                await update.message.reply_text("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
            csv_buffer = StringIO()
            writer = csv.writer(csv_buffer)
            writer.writerow(["parsed_at", "file_name", "full_text"])
            for parsed_at, file_name, full_text in rows:
                writer.writerow([parsed_at, file_name, full_text])

            data = csv_buffer.getvalue().encode('utf-8')
            csv_bytes = BytesIO(data)
            filename = f"file_parse_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"

            await update.message.reply_document(document=csv_bytes, filename=filename)
            logger.info("‚úÖ CSV —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", user.id)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /export: {e}", exc_info=True)
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        logger.info(f"üí¨ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.username} ({user.id}): {update.message.text[:50]}...")
        
        try:
            await update.message.reply_text(
                "üì∑ Send me an image with text!\n\n"
                "üîç I will extract all text and numbers from the image\n\n"
                "üí° Available commands: /start, /help, /status"
            )
            logger.info(f"‚úÖ Text response sent to user {user.id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—Å—Ç: {e}")
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        user = update.effective_user
        logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç {user.username} ({user.id})")
        
        processing_message = None
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            processing_message = await update.message.reply_text("üîç Analyzing image...")
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            logger.info("üìÅ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ...")
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            logger.info(f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {photo.width}x{photo.height}, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {photo.file_size} –±–∞–π—Ç")
            
            file = await context.bot.get_file(photo.file_id)
            logger.info(f"üìÇ Telegram file_path: {file.file_path}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            logger.info("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            image_bytes = await self.download_image(file.file_path)
            
            if not image_bytes:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                await processing_message.edit_text("‚ùå Error downloading image")
                return
            
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(image_bytes)} –±–∞–π—Ç")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await processing_message.edit_text("üß† Extracting text from image via OpenAI GPT-4o Vision...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI
            logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ OpenAI...")
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            ocr_result = await self.extract_text_via_openai(image_bytes)
            
            if not ocr_result:
                logger.error("‚ùå OpenAI –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                await processing_message.edit_text(
                    "‚ùå Failed to extract text from image\n\n"
                    "Possible reasons:\n"
                    "‚Ä¢ Image is blurry or too small\n"
                    "‚Ä¢ Temporary OpenAI API unavailability\n\n"
                    "Please try again with a clearer image"
                )
                return
            
            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(ocr_result)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            try:
                file_name = os.path.basename(file.file_path) if file.file_path else f"{photo.file_id}.jpg"
            except Exception:
                file_name = f"{photo.file_id}.jpg"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–º–∏—Ç Telegram 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(ocr_result) > 4000:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏
                await processing_message.edit_text(f"üìã **EXTRACTED TEXT (part 1):**\n{ocr_result[:4000]}")
                await update.message.reply_text(f"üìã **EXTRACTED TEXT (part 2):**\n{ocr_result[4000:]}")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await processing_message.edit_text(f"üìã **EXTRACTED TEXT:**\n{ocr_result}")
            
            logger.info(f"üì§ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
            self.save_parse_result(file_name=file_name, full_text=ocr_result)
                
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
            try:
                if processing_message:
                    await processing_message.edit_text(f"‚ùå Processing error occurred:\n{str(e)[:200]}...")
                else:
                    await update.message.reply_text(f"‚ùå Processing error occurred:\n{str(e)[:200]}...")
            except Exception as send_error:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
    
    async def download_image(self, file_path: str) -> Optional[bytes]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
        if file_path.startswith('http'):
            url = file_path
        else:
            url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}"
        
        logger.info(f"‚¨áÔ∏è –§–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {url}")
        
        try:
            response = requests.get(url, timeout=30)
            logger.info(f"üì° HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                content_length = len(response.content)
                logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä: {content_length} –±–∞–π—Ç")
                return response.content
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}, —Ç–µ–∫—Å—Ç: {response.text[:200]}")
                return None
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
            return None
    
    async def extract_text_via_openai(self, image_bytes: bytes) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI GPT-4o Vision"""
        logger.info(f"ü§ñ –ù–∞—á–∏–Ω–∞—é –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI, —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(image_bytes)} –±–∞–π—Ç")
        
        try:
            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            img_b64 = base64.b64encode(image_bytes).decode('utf-8')
            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –≤ base64, –¥–ª–∏–Ω–∞: {len(img_b64)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ù–∞—à –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            prompt = "I am creating an audio version of this image for someone who cannot see it. Please extract and list all the text and numbers."
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = {
                "Authorization": f"Bearer {OPENAI_API_KEY}",
                "Content-Type": "application/json"
            }
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload
            payload = {
                "model": "gpt-4o",
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": prompt
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{img_b64}"
                                }
                            }
                        ]
                    }
                ],
                "max_tokens": 1000,
                "temperature": 0.1
            }
            
            logger.info(f"üí¨ –ü—Ä–æ–º–ø—Ç: {prompt}")
            logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é POST –∑–∞–ø—Ä–æ—Å –≤ OpenAI...")
            
            response = requests.post(
                OPENAI_API_URL,
                headers=headers,
                json=payload,
                timeout=60
            )
            
            logger.info(f"üì° HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
                
                if 'choices' in result and len(result['choices']) > 0:
                    content = result['choices'][0]['message']['content'].strip()
                    logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    logger.info(f"üìù –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {content[:100]}...")
                    return content
                else:
                    logger.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI")
                    return None
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {response.status_code}")
                logger.error(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text[:500]}")
                return None
                
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
            return None
    

    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π run_polling
            self.application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üé¨ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏...")
    logger.info("üîß –°–æ–∑–¥–∞—é —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞...")
    
    try:
        bot = ImageAnalysisBot()
        logger.info("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        bot.run()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}", exc_info=True)
        raise
    finally:
        logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")

if __name__ == "__main__":
    main() 