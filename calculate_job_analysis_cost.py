#!/usr/bin/env python3
"""
–ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ OpenAI API
"""

import json
import sqlite3

# –¢–∞—Ä–∏—Ñ—ã OpenAI GPT-4o (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞ —è–Ω–≤–∞—Ä—å 2025)
OPENAI_PRICING = {
    "input_cost_per_1m_tokens": 2.50,   # $2.50 –∑–∞ 1M –≤—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
    "output_cost_per_1m_tokens": 10.00  # $10.00 –∑–∞ 1M –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
}

def estimate_tokens_for_job_analysis():
    """–û—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    conn = sqlite3.connect('image_analysis_results.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT analysis_id, response_text, prompt_tokens, completion_tokens, total_tokens
        FROM analysis_results 
        WHERE status = 'SUCCESS'
        ORDER BY analysis_id
        LIMIT 3
    ''')
    
    results = cursor.fetchall()
    conn.close()
    
    if not results:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print("üßÆ –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò –ê–ù–ê–õ–ò–ó–ê –†–ê–ë–û–¢–´")
    print("="*70)
    
    # –û—Ü–µ–Ω–∏–º —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã
    sample_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ –∏ –∏–∑–≤–ª–µ–∫–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã —á–µ–ª–æ–≤–µ–∫–∞.

–ú–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "current_job": {
    "company": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
    "position": "–¥–æ–ª–∂–Ω–æ—Å—Ç—å", 
    "period": "–ø–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)",
    "is_current": true/false
  },
  "found": true/false
}

–ò—â–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: "Present", "Current", "Founder", "CEO", "Head of", –∏–ª–∏ –¥—Ä—É–≥–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—Ç—É.
–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—Ç—É, –≤–µ—Ä–Ω–∏ {"found": false}.

–¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
"""
    
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ (–≤ —Å–∏–º–≤–æ–ª–∞—Ö)
    base_prompt_length = len(sample_prompt)
    
    print(f"üìù –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–º–ø—Ç–∞:")
    print(f"   ‚Ä¢ –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: ~{base_prompt_length} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã
    total_response_length = 0
    total_original_tokens = 0
    
    for result in results:
        analysis_id, response_text, prompt_tokens, completion_tokens, total_tokens = result
        total_response_length += len(response_text)
        total_original_tokens += total_tokens
        print(f"   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ #{analysis_id}: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤ ‚Üí {total_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
    
    avg_response_length = total_response_length / len(results)
    avg_original_tokens = total_original_tokens / len(results)
    
    print(f"\nüìä –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {avg_response_length:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª): {avg_original_tokens:.0f}")
    
    # –û—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã
    # –ì—Ä—É–±–∞—è —Ñ–æ—Ä–º—É–ª–∞: 1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    estimated_input_tokens_per_analysis = (base_prompt_length + avg_response_length) / 4
    estimated_output_tokens_per_analysis = 100  # JSON –æ—Ç–≤–µ—Ç –æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π
    estimated_total_tokens_per_analysis = estimated_input_tokens_per_analysis + estimated_output_tokens_per_analysis
    
    print(f"\nüî¢ –û–¶–ï–ù–ö–ê –¢–û–ö–ï–ù–û–í –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –†–ê–ë–û–¢–´:")
    print(f"   ‚Ä¢ –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ~{estimated_input_tokens_per_analysis:.0f}")
    print(f"   ‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ~{estimated_output_tokens_per_analysis}")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: ~{estimated_total_tokens_per_analysis:.0f}")
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    input_cost_per_analysis = (estimated_input_tokens_per_analysis / 1_000_000) * OPENAI_PRICING['input_cost_per_1m_tokens']
    output_cost_per_analysis = (estimated_output_tokens_per_analysis / 1_000_000) * OPENAI_PRICING['output_cost_per_1m_tokens']
    total_cost_per_analysis = input_cost_per_analysis + output_cost_per_analysis
    
    print(f"\nüí∞ –°–¢–û–ò–ú–û–°–¢–¨ –û–î–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –†–ê–ë–û–¢–´:")
    print(f"   ‚Ä¢ –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ${input_cost_per_analysis:.6f}")
    print(f"   ‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ${output_cost_per_analysis:.6f}")
    print(f"   ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost_per_analysis:.6f}")
    
    return {
        'estimated_input_tokens': estimated_input_tokens_per_analysis,
        'estimated_output_tokens': estimated_output_tokens_per_analysis,
        'estimated_total_tokens': estimated_total_tokens_per_analysis,
        'cost_per_analysis': total_cost_per_analysis
    }

def calculate_batch_costs(cost_per_analysis):
    """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤"""
    
    print(f"\nüìà –°–¢–û–ò–ú–û–°–¢–¨ –î–õ–Ø –†–ê–ó–ù–´–• –û–ë–™–ï–ú–û–í:")
    print("-"*70)
    
    volumes = [
        (10, "–ù–∞—à —Ç–µ—Å—Ç"),
        (100, "–°—Ä–µ–¥–Ω–∏–π –∫–ª–∏–µ–Ω—Ç/–¥–µ–Ω—å"),
        (1000, "–ö—Ä—É–ø–Ω—ã–π –∫–ª–∏–µ–Ω—Ç/–¥–µ–Ω—å"),
        (5000, "–ù–∞—à –∫–ª–∏–µ–Ω—Ç/–Ω–µ–¥–µ–ª—è"),
        (21650, "–ù–∞—à –∫–ª–∏–µ–Ω—Ç/–º–µ—Å—è—Ü (5000*4.33)"),
        (260000, "–ù–∞—à –∫–ª–∏–µ–Ω—Ç/–≥–æ–¥")
    ]
    
    for volume, description in volumes:
        total_cost = volume * cost_per_analysis
        print(f"   ‚Ä¢ {volume:6,} –∞–Ω–∞–ª–∏–∑–æ–≤ ({description:20s}): ${total_cost:.4f}")

def compare_with_original_ocr():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º OCR –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    original_cost_per_request = 0.054715 / 9  # $0.054715 –∑–∞ 9 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    
    job_analysis_data = estimate_tokens_for_job_analysis()
    if not job_analysis_data:
        return
    
    job_analysis_cost = job_analysis_data['cost_per_analysis']
    
    print(f"\n‚öñÔ∏è  –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–û–ò–ú–û–°–¢–ò:")
    print("-"*70)
    print(f"   üì∏ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π OCR –∞–Ω–∞–ª–∏–∑: ${original_cost_per_request:.6f}")
    print(f"   üè¢ –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã:           ${job_analysis_cost:.6f}")
    print(f"   üìä –†–∞–∑–Ω–∏—Ü–∞:                ${job_analysis_cost - original_cost_per_request:.6f}")
    print(f"   üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ:             {(job_analysis_cost/original_cost_per_request - 1)*100:.1f}%")
    
    # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: OCR + –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã
    total_cost_per_image = original_cost_per_request + job_analysis_cost
    print(f"\nüí° –û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨ (OCR + –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã): ${total_cost_per_image:.6f}")
    
    # –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å 5000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é
    weekly_requests = 5000
    monthly_requests = weekly_requests * 4.33
    
    monthly_ocr_cost = monthly_requests * original_cost_per_request
    monthly_job_analysis_cost = monthly_requests * job_analysis_cost
    monthly_total_cost = monthly_requests * total_cost_per_image
    
    print(f"\nüéØ –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê (5000 –∑–∞–ø—Ä–æ—Å–æ–≤/–Ω–µ–¥–µ–ª—é = {monthly_requests:.0f}/–º–µ—Å—è—Ü):")
    print(f"   üì∏ OCR –∞–Ω–∞–ª–∏–∑:      ${monthly_ocr_cost:.2f}/–º–µ—Å—è—Ü")
    print(f"   üè¢ –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã:   ${monthly_job_analysis_cost:.2f}/–º–µ—Å—è—Ü")
    print(f"   üìä –ò–¢–û–ì–û:           ${monthly_total_cost:.2f}/–º–µ—Å—è—Ü")

def main():
    print("üíº –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –°–¢–û–ò–ú–û–°–¢–ò –ê–ù–ê–õ–ò–ó–ê –†–ê–ë–û–¢–´")
    print("="*70)
    
    # –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    job_analysis_data = estimate_tokens_for_job_analysis()
    
    if job_analysis_data:
        # –†–∞—Å—á–µ—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤
        calculate_batch_costs(job_analysis_data['cost_per_analysis'])
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º OCR
        compare_with_original_ocr()
    
    print(f"\n" + "="*70)
    print("‚úÖ –†–ê–°–ß–ï–¢ –ó–ê–í–ï–†–®–ï–ù")

if __name__ == "__main__":
    main() 