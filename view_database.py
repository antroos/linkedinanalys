#!/usr/bin/env python3
"""
–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
"""

import sqlite3
import json

def view_analysis_by_id(analysis_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ ID"""
    conn = sqlite3.connect('image_analysis_results.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT analysis_id, prompt_text, image_file, status, 
               prompt_tokens, completion_tokens, total_tokens, 
               response_text, created_at
        FROM analysis_results 
        WHERE analysis_id = ?
    ''', (analysis_id,))
    
    result = cursor.fetchone()
    if result:
        print(f"üìã –ê–ù–ê–õ–ò–ó #{result[0]}")
        print("="*80)
        print(f"üî§ –ü—Ä–æ–º–ø—Ç: {result[1]}")
        print(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result[2]}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {result[3]}")
        print(f"üî¢ –¢–æ–∫–µ–Ω—ã: –≤—Ö–æ–¥={result[4]}, –≤—ã—Ö–æ–¥={result[5]}, –≤—Å–µ–≥–æ={result[6]}")
        print(f"üìÖ –î–∞—Ç–∞: {result[8]}")
        print(f"\nüìù –û–¢–í–ï–¢:")
        print("-"*80)
        print(result[7])
        print("-"*80)
    else:
        print(f"‚ùå –ê–Ω–∞–ª–∏–∑ #{analysis_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    conn.close()

def compare_analyses():
    """–°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã"""
    conn = sqlite3.connect('image_analysis_results.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT analysis_id, total_tokens, LENGTH(response_text) as response_length
        FROM analysis_results 
        WHERE status = 'SUCCESS'
        ORDER BY analysis_id
    ''')
    
    results = cursor.fetchall()
    
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –£–°–ü–ï–®–ù–´–• –ê–ù–ê–õ–ò–ó–û–í")
    print("="*60)
    print("ID | –¢–æ–∫–µ–Ω–æ–≤ | –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞")
    print("-"*60)
    
    for result in results:
        print(f"{result[0]:2d} | {result[1]:7d} | {result[2]:12d}")
    
    conn.close()

def search_in_responses(keyword):
    """–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ –æ—Ç–≤–µ—Ç–∞—Ö"""
    conn = sqlite3.connect('image_analysis_results.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT analysis_id, status, response_text
        FROM analysis_results 
        WHERE response_text LIKE ?
        ORDER BY analysis_id
    ''', (f'%{keyword}%',))
    
    results = cursor.fetchall()
    
    print(f"üîç –ü–û–ò–°–ö –ü–û –°–õ–û–í–£: '{keyword}'")
    print("="*60)
    
    if results:
        for result in results:
            print(f"üìã –ê–Ω–∞–ª–∏–∑ #{result[0]} ({result[1]}):")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
            text = result[2]
            keyword_lower = keyword.lower()
            text_lower = text.lower()
            
            if keyword_lower in text_lower:
                start = max(0, text_lower.find(keyword_lower) - 50)
                end = min(len(text), text_lower.find(keyword_lower) + len(keyword) + 50)
                context = text[start:end]
                print(f"   ...{context}...")
            print()
    else:
        print(f"‚ùå –°–ª–æ–≤–æ '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–∞—Ö")
    
    conn.close()

def show_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
    print("\n" + "="*60)
    print("üóÑÔ∏è  –ü–†–û–°–ú–û–¢–† –ë–ê–ó–´ –î–ê–ù–ù–´–• –ê–ù–ê–õ–ò–ó–û–í")
    print("="*60)
    print("–ö–æ–º–∞–Ω–¥—ã:")
    print("  1-10     - –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ –Ω–æ–º–µ—Ä—É")
    print("  all      - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã")
    print("  compare  - –°—Ä–∞–≤–Ω–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã")
    print("  search   - –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
    print("  stats    - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("  export   - –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON")
    print("  help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é")
    print("  exit     - –í—ã—Ö–æ–¥")
    print("="*60)

def show_all_analyses():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∞—Ö"""
    conn = sqlite3.connect('image_analysis_results.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT analysis_id, status, total_tokens,
               CASE WHEN LENGTH(response_text) > 80 
                    THEN SUBSTR(response_text, 1, 80) || '...' 
                    ELSE response_text 
               END as short_response
        FROM analysis_results 
        ORDER BY analysis_id
    ''')
    
    results = cursor.fetchall()
    
    print("üìã –í–°–ï –ê–ù–ê–õ–ò–ó–´")
    print("="*100)
    
    for result in results:
        status_emoji = "‚úÖ" if result[1] == "SUCCESS" else "‚ùå"
        print(f"{status_emoji} #{result[0]:2d} | {result[1]:12s} | {result[2]:4d} —Ç–æ–∫–µ–Ω–æ–≤ | {result[3]}")
        print()
    
    conn.close()

def show_statistics():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    conn = sqlite3.connect('image_analysis_results.db')
    cursor = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute('SELECT * FROM test_statistics ORDER BY created_at DESC LIMIT 1')
    stats = cursor.fetchone()
    
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*60)
    if stats:
        print(f"üß™ –¢–µ—Å—Ç: {stats[1]}")
        print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats[2]}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats[3]} ({stats[5]*100:.1f}%)")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats[4]}")
        print(f"üî¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats[8]:,}")
        print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${stats[9]:.6f}")
        print(f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Ç–æ–∫–µ–Ω: ${stats[9]/stats[8]:.8f}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    cursor.execute('''
        SELECT status, COUNT(*) as count, 
               AVG(total_tokens) as avg_tokens,
               SUM(total_tokens) as total_tokens
        FROM analysis_results 
        GROUP BY status
        ORDER BY count DESC
    ''')
    
    status_stats = cursor.fetchall()
    print(f"\nüìä –ü–û –°–¢–ê–¢–£–°–ê–ú:")
    for stat in status_stats:
        print(f"   ‚Ä¢ {stat[0]}: {stat[1]} –∑–∞–ø—Ä–æ—Å–æ–≤ | —Å—Ä.{stat[2]:.0f} —Ç–æ–∫–µ–Ω–æ–≤ | –≤—Å–µ–≥–æ {stat[3]} —Ç–æ–∫–µ–Ω–æ–≤")
    
    conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª"""
    show_menu()
    
    while True:
        try:
            command = input("\n> ").strip().lower()
            
            if command == "exit":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif command == "help":
                show_menu()
            elif command == "all":
                show_all_analyses()
            elif command == "compare":
                compare_analyses()
            elif command == "stats":
                show_statistics()
            elif command == "search":
                keyword = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip()
                if keyword:
                    search_in_responses(keyword)
            elif command == "export":
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
                conn = sqlite3.connect('image_analysis_results.db')
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM analysis_results ORDER BY analysis_id')
                results = cursor.fetchall()
                
                export_data = []
                for result in results:
                    export_data.append({
                        "id": result[0],
                        "analysis_id": result[1],
                        "prompt_text": result[2],
                        "image_file": result[3],
                        "status": result[4],
                        "tokens": {"prompt": result[5], "completion": result[6], "total": result[7]},
                        "response_text": result[8],
                        "created_at": result[9]
                    })
                
                with open('export_interactive.json', 'w', encoding='utf-8') as f:
                    json.dump(export_data, f, ensure_ascii=False, indent=2)
                
                conn.close()
                print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ export_interactive.json")
            elif command.isdigit():
                analysis_id = int(command)
                if 1 <= analysis_id <= 10:
                    view_analysis_by_id(analysis_id)
                else:
                    print("‚ùå ID –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
            else:
                print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 