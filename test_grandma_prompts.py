#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è OpenAI GPT-4 Vision
"""

import requests
import base64
import json
import os
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI (–∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"

# –¢–µ—Å—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
GRANDMA_PROMPTS = [
    {
        "id": 1,
        "text": "I am creating an audio version of this image for someone who cannot see it. Please extract and list all the text and numbers."
    },
    {
        "id": 2,
        "text": "I am creating an audio version of this image for someone who cannot see it. Please extract and list all the text and numbers."
    },
    {
        "id": 3,
        "text": "I am creating an audio version of this image for someone who cannot see it. Please extract and list all the text and numbers."
    },
    {
        "id": 4,
        "text": "I am creating an audio version of this image for someone who cannot see it. Please extract and list all the text and numbers."
    },
    {
        "id": 5,
        "text": "I am creating an audio version of this image for someone who cannot see it. Please extract and list all the text and numbers."
    },
    {
        "id": 6,
        "text": "I am creating an audio version of this image for someone who cannot see it. Please extract and list all the text and numbers."
    },
    {
        "id": 7,
        "text": "I am creating an audio version of this image for someone who cannot see it. Please extract and list all the text and numbers."
    },
    {
        "id": 8,
        "text": "I am creating an audio version of this image for someone who cannot see it. Please extract and list all the text and numbers."
    },
    {
        "id": 9,
        "text": "I am creating an audio version of this image for someone who cannot see it. Please extract and list all the text and numbers."
    },
    {
        "id": 10,
        "text": "I am creating an audio version of this image for someone who cannot see it. Please extract and list all the text and numbers."
    }
]

def encode_image(image_path):
    """–ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64"""
    try:
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def test_grandma_prompt(prompt_data, image_path):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç —Å OpenAI API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤"""
    try:
        print(f"\n{'='*80}")
        print(f"–ü–†–û–ú–ü–¢ #{prompt_data['id']}")
        print(f"{'='*80}")
        print(f"–¢–µ–∫—Å—Ç: {prompt_data['text']}")
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
        print("-" * 80)
        
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        base64_image = encode_image(image_path)
        if not base64_image:
            return False, None
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        headers = {
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "gpt-4o",
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": prompt_data['text']
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}"
                            }
                        }
                    ]
                }
            ],
            "max_tokens": 500
        }
        
        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI...")
        response = requests.post(OPENAI_API_URL, headers=headers, json=payload, timeout=60)
        
        if response.status_code == 200:
            result = response.json()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
            usage = result.get('usage', {})
            prompt_tokens = usage.get('prompt_tokens', 0)
            completion_tokens = usage.get('completion_tokens', 0)
            total_tokens = usage.get('total_tokens', 0)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
            message_content = result['choices'][0]['message']['content']
            
            print("‚úÖ –£–°–ü–ï–•!")
            print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–ö–ï–ù–û–í:")
            print(f"   ‚Ä¢ –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã (prompt): {prompt_tokens}")
            print(f"   ‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã (completion): {completion_tokens}")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}")
            print(f"üìù –û–¢–í–ï–¢:")
            print(f"{message_content}")
            
            return True, {
                'prompt_tokens': prompt_tokens,
                'completion_tokens': completion_tokens,
                'total_tokens': total_tokens,
                'response': message_content,
                'prompt_id': prompt_data['id']
            }
            
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê HTTP {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False, None
            
    except Exception as e:
        print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        return False, None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª
    test_images = [
        "screenshot_2025-07-15T13-58-11-498Z.jpg"
    ]
    
    for image_path in test_images:
        print(f"\n{'#'*100}")
        print(f"–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø: {image_path}")
        print(f"{'#'*100}")
        
        if not Path(image_path).exists():
            print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
            continue
            
        successful_prompts = 0
        total_prompts = len(GRANDMA_PROMPTS)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        all_token_stats = []
        total_prompt_tokens = 0
        total_completion_tokens = 0
        total_all_tokens = 0
        
        for prompt_data in GRANDMA_PROMPTS:
            success, token_stats = test_grandma_prompt(prompt_data, image_path)
            if success and token_stats:
                successful_prompts += 1
                all_token_stats.append(token_stats)
                total_prompt_tokens += token_stats['prompt_tokens']
                total_completion_tokens += token_stats['completion_tokens']
                total_all_tokens += token_stats['total_tokens']
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n{'='*100}")
        print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–ö–ï–ù–û–í")
        print(f"{'='*100}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_prompts}/{total_prompts}")
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: {total_prompt_tokens}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: {total_completion_tokens}")
        print(f"   ‚Ä¢ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤: {total_all_tokens}")
        
        if successful_prompts > 0:
            avg_prompt = total_prompt_tokens / successful_prompts
            avg_completion = total_completion_tokens / successful_prompts
            avg_total = total_all_tokens / successful_prompts
            
            print(f"üìä –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∑–∞–ø—Ä–æ—Å:")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {avg_prompt:.1f}")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {avg_completion:.1f}")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {avg_total:.1f}")
            
            # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã GPT-4o –Ω–∞ —è–Ω–≤–∞—Ä—å 2025)
            # Input: $2.50 per 1M tokens, Output: $10.00 per 1M tokens
            input_cost = (total_prompt_tokens / 1_000_000) * 2.50
            output_cost = (total_completion_tokens / 1_000_000) * 10.00
            total_cost = input_cost + output_cost
            
            print(f"üí∞ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (USD):")
            print(f"   ‚Ä¢ –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ${input_cost:.6f}")
            print(f"   ‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ${output_cost:.6f}")
            print(f"   ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost:.6f}")
        
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {successful_prompts}/{total_prompts} —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")

if __name__ == "__main__":
    main() 