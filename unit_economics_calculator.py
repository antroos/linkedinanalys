#!/usr/bin/env python3
"""
–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ OpenAI GPT-4o Vision
"""

import math

# –î–ê–ù–ù–´–ï –ò–ó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ test_grandma_prompts.py)
# ===============================================================

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
TEST_RESULTS = {
    "total_requests": 10,
    "successful_requests": 9,
    "failed_requests": 1,
    "success_rate": 0.9,  # 90%
    
    # –¢–æ–∫–µ–Ω—ã (–∏–∑ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
    "total_prompt_tokens": 7182,
    "total_completion_tokens": 3676,
    "total_tokens": 10858,
    
    # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    "avg_prompt_tokens": 798.0,
    "avg_completion_tokens": 408.4,
    "avg_total_tokens": 1206.4,
    
    # –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    "total_cost_usd": 0.054715
}

# –¢–ê–†–ò–§–´ OPENAI GPT-4O (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞ —è–Ω–≤–∞—Ä—å 2025)
# ================================================
OPENAI_PRICING = {
    "input_cost_per_1m_tokens": 2.50,   # $2.50 –∑–∞ 1M –≤—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
    "output_cost_per_1m_tokens": 10.00  # $10.00 –∑–∞ 1M –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
}

# –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê
# ==================
CLIENT_REQUIREMENTS = {
    "requests_per_week": 5000,
    "retry_rate": 0.20,  # 20% –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞—Ç—å
    "weeks_per_month": 4.33,  # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –≤ –º–µ—Å—è—Ü–µ
    "months_per_year": 12
}

def calculate_unit_economics():
    """–†–∞—Å—á–µ—Ç —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    
    print("üßÆ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –Æ–ù–ò–¢-–≠–ö–û–ù–û–ú–ò–ö–ò")
    print("=" * 70)
    print(f"üìä –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤: {TEST_RESULTS['success_rate']*100:.1f}%")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å: {TEST_RESULTS['avg_total_tokens']:.1f}")
    print(f"   ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${TEST_RESULTS['total_cost_usd']/TEST_RESULTS['successful_requests']:.6f}")
    
    print(f"\nüë§ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:")
    print(f"   ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é: {CLIENT_REQUIREMENTS['requests_per_week']:,}")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–µ—Ä–µ–¥–µ–ª–æ–∫: {CLIENT_REQUIREMENTS['retry_rate']*100:.0f}%")
    
    # –†–ê–°–ß–ï–¢–´
    # =======
    
    # 1. –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    base_requests_per_week = CLIENT_REQUIREMENTS['requests_per_week']
    
    # 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑-–∑–∞ –ø–µ—Ä–µ–¥–µ–ª–æ–∫ (20%)
    retry_requests_per_week = base_requests_per_week * CLIENT_REQUIREMENTS['retry_rate']
    
    # 3. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–¥–µ–ª–æ–∫
    total_requests_per_week = base_requests_per_week + retry_requests_per_week
    
    # 4. –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    # –ï—Å–ª–∏ success_rate = 90%, —Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    adjusted_requests_per_week = total_requests_per_week / TEST_RESULTS['success_rate']
    
    # 5. –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    cost_per_successful_request = TEST_RESULTS['total_cost_usd'] / TEST_RESULTS['successful_requests']
    
    # 6. –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    weekly_cost = adjusted_requests_per_week * cost_per_successful_request
    monthly_cost = weekly_cost * CLIENT_REQUIREMENTS['weeks_per_month']
    yearly_cost = monthly_cost * CLIENT_REQUIREMENTS['months_per_year']
    
    # 7. –†–∞—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
    weekly_tokens = adjusted_requests_per_week * TEST_RESULTS['avg_total_tokens']
    monthly_tokens = weekly_tokens * CLIENT_REQUIREMENTS['weeks_per_month']
    yearly_tokens = monthly_tokens * CLIENT_REQUIREMENTS['months_per_year']
    
    # –î–ï–¢–ê–õ–¨–ù–ê–Ø –†–ê–ó–ë–ò–í–ö–ê –ü–û –¢–ò–ü–ê–ú –¢–û–ö–ï–ù–û–í
    # ===================================
    weekly_prompt_tokens = adjusted_requests_per_week * TEST_RESULTS['avg_prompt_tokens']
    weekly_completion_tokens = adjusted_requests_per_week * TEST_RESULTS['avg_completion_tokens']
    
    monthly_prompt_tokens = weekly_prompt_tokens * CLIENT_REQUIREMENTS['weeks_per_month']
    monthly_completion_tokens = weekly_completion_tokens * CLIENT_REQUIREMENTS['weeks_per_month']
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º —Ç–æ–∫–µ–Ω–æ–≤
    weekly_input_cost = (weekly_prompt_tokens / 1_000_000) * OPENAI_PRICING['input_cost_per_1m_tokens']
    weekly_output_cost = (weekly_completion_tokens / 1_000_000) * OPENAI_PRICING['output_cost_per_1m_tokens']
    
    monthly_input_cost = weekly_input_cost * CLIENT_REQUIREMENTS['weeks_per_month']
    monthly_output_cost = weekly_output_cost * CLIENT_REQUIREMENTS['weeks_per_month']
    
    # –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
    # ================
    
    print(f"\nüìà –î–ï–¢–ê–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢:")
    print(f"   ‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –Ω–µ–¥–µ–ª—é: {base_requests_per_week:,}")
    print(f"   ‚Ä¢ –ü–µ—Ä–µ–¥–µ–ª–∫–∏ (20%): {retry_requests_per_week:,.0f}")
    print(f"   ‚Ä¢ –ò—Ç–æ–≥–æ —Å –ø–µ—Ä–µ–¥–µ–ª–∫–∞–º–∏: {total_requests_per_week:,.0f}")
    print(f"   ‚Ä¢ –° —É—á–µ—Ç–æ–º success rate (90%): {adjusted_requests_per_week:,.0f}")
    
    print(f"\nüí∞ –°–¢–û–ò–ú–û–°–¢–¨:")
    print(f"   üìÖ –ù–µ–¥–µ–ª—è:")
    print(f"      ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${weekly_cost:.2f}")
    print(f"      ‚Ä¢ –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ${weekly_input_cost:.2f}")
    print(f"      ‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ${weekly_output_cost:.2f}")
    
    print(f"   üìÖ –ú–µ—Å—è—Ü:")
    print(f"      ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${monthly_cost:.2f}")
    print(f"      ‚Ä¢ –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ${monthly_input_cost:.2f}")
    print(f"      ‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ${monthly_output_cost:.2f}")
    
    print(f"   üìÖ –ì–æ–¥:")
    print(f"      ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${yearly_cost:.2f}")
    
    print(f"\nüî¢ –ü–û–¢–†–ï–ë–õ–ï–ù–ò–ï –¢–û–ö–ï–ù–û–í:")
    print(f"   üìÖ –ù–µ–¥–µ–ª—è: {weekly_tokens:,.0f} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"   üìÖ –ú–µ—Å—è—Ü: {monthly_tokens:,.0f} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"   üìÖ –ì–æ–¥: {yearly_tokens:,.0f} —Ç–æ–∫–µ–Ω–æ–≤")
    
    print(f"\nüìä –Æ–ù–ò–¢-–ú–ï–¢–†–ò–ö–ò:")
    print(f"   ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${cost_per_successful_request:.6f}")
    print(f"   ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–¥–µ–ª–æ–∫: ${cost_per_successful_request * 1.2:.6f}")
    print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ–¥–∏–Ω —É—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {TEST_RESULTS['avg_total_tokens']:.0f}")
    
    # –ü–†–û–ì–ù–û–ó–´ –ü–†–ò –†–ê–ó–ù–´–• –û–ë–™–ï–ú–ê–•
    # ===========================
    
    print(f"\nüîÆ –ü–†–û–ì–ù–û–ó–´ –ü–†–ò –†–ê–ó–ù–´–• –û–ë–™–ï–ú–ê–• (–º–µ—Å—è—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å):")
    
    volumes = [1000, 2500, 5000, 10000, 20000]
    
    for volume in volumes:
        vol_adjusted = (volume + volume * CLIENT_REQUIREMENTS['retry_rate']) / TEST_RESULTS['success_rate']
        vol_weekly_cost = vol_adjusted * cost_per_successful_request
        vol_monthly_cost = vol_weekly_cost * CLIENT_REQUIREMENTS['weeks_per_month']
        
        print(f"   ‚Ä¢ {volume:,} –∑–∞–ø—Ä–æ—Å–æ–≤/–Ω–µ–¥–µ–ª—é ‚Üí ${vol_monthly_cost:.2f}/–º–µ—Å—è—Ü")
    
    # –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
    # ===========================
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    
    # –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —Å–Ω–∏–∂–µ–Ω–∏—è retry rate
    optimized_retry_rate = 0.10  # 10% –≤–º–µ—Å—Ç–æ 20%
    optimized_total = (base_requests_per_week + base_requests_per_week * optimized_retry_rate) / TEST_RESULTS['success_rate']
    optimized_weekly_cost = optimized_total * cost_per_successful_request
    optimized_monthly_cost = optimized_weekly_cost * CLIENT_REQUIREMENTS['weeks_per_month']
    
    savings_monthly = monthly_cost - optimized_monthly_cost
    savings_yearly = savings_monthly * 12
    
    print(f"   ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–µ–ª–æ–∫ —Å 20% –¥–æ 10%:")
    print(f"     - –≠–∫–æ–Ω–æ–º–∏—è –≤ –º–µ—Å—è—Ü: ${savings_monthly:.2f}")
    print(f"     - –≠–∫–æ–Ω–æ–º–∏—è –≤ –≥–æ–¥: ${savings_yearly:.2f}")
    
    # –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç—Ä–∞—Ç
    input_percentage = (monthly_input_cost / monthly_cost) * 100
    output_percentage = (monthly_output_cost / monthly_cost) * 100
    
    print(f"   ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤:")
    print(f"     - –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è): {input_percentage:.1f}%")
    print(f"     - –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã (–æ—Ç–≤–µ—Ç—ã): {output_percentage:.1f}%")
    
    if output_percentage > 70:
        print(f"   ‚ö†Ô∏è  –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã –Ω–∞ –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã!")
        print(f"     - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–æ–≤")
        print(f"     - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å max_tokens –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
    
    return {
        'weekly_cost': weekly_cost,
        'monthly_cost': monthly_cost,
        'yearly_cost': yearly_cost,
        'weekly_tokens': weekly_tokens,
        'monthly_tokens': monthly_tokens,
        'cost_per_request': cost_per_successful_request,
        'adjusted_requests_per_week': adjusted_requests_per_week
    }

def calculate_break_even_pricing():
    """–†–∞—Å—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    
    print(f"\n" + "=" * 70)
    print(f"üíº –†–ê–°–ß–ï–¢ PRICING –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê")
    print(f"=" * 70)
    
    cost_per_request = TEST_RESULTS['total_cost_usd'] / TEST_RESULTS['successful_requests']
    
    # –†–∞–∑–Ω—ã–µ –Ω–∞—Ü–µ–Ω–∫–∏
    markups = [1.5, 2.0, 2.5, 3.0, 5.0]  # 50%, 100%, 150%, 200%, 400%
    
    print(f"üìä –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${cost_per_request:.6f}")
    print(f"üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ü–µ–Ω—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–∑–∞ –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑):")
    
    for markup in markups:
        client_price = cost_per_request * markup
        profit_margin = ((markup - 1) / markup) * 100
        
        # –†–∞—Å—á–µ—Ç –º–µ—Å—è—á–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
        monthly_requests = CLIENT_REQUIREMENTS['requests_per_week'] * CLIENT_REQUIREMENTS['weeks_per_month']
        monthly_revenue = monthly_requests * client_price
        monthly_costs = monthly_requests * cost_per_request * 1.2  # +20% –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫–∏
        monthly_profit = monthly_revenue - monthly_costs
        
        print(f"   ‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞ {(markup-1)*100:.0f}%: ${client_price:.4f} (–º–∞—Ä–∂–∞ {profit_margin:.1f}%)")
        print(f"     - –ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: ${monthly_revenue:.2f}")
        print(f"     - –ú–µ—Å—è—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${monthly_profit:.2f}")

if __name__ == "__main__":
    results = calculate_unit_economics()
    calculate_break_even_pricing()
    
    print(f"\n" + "=" * 70)
    print(f"‚úÖ –†–ê–°–ß–ï–¢ –ó–ê–í–ï–†–®–ï–ù")
    print(f"=" * 70) 