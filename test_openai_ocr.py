#!/usr/bin/env python3
"""
–¢–µ—Å—Ç OpenAI GPT-4 Vision API –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
"""

import requests
import base64
import json
import os
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI (–∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"

# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
IMAGE_PATH = "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-07-16 –≤ 01.41.27.png"

# –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OCR
OCR_PROMPTS = [
    "Extract all visible text from this image. List every word, number, and text element you can see.",
    "Please read and transcribe all text content in this image.",
    "Perform OCR on this image. What text do you see?",
    "What text is written in this image? Please provide a complete transcription.",
    "Analyze this image and extract all readable text, including any numbers, names, or labels.",
    "Read all text from this screenshot/image and provide the exact transcription.",
    "I need you to act as an OCR tool. Extract every piece of text visible in this image.",
    "This image contains text. Please read it all and provide a detailed transcription.",
    "Scan this image for text and provide a complete list of all visible words and text elements.",
    "Extract and list all text content from this image, maintaining the original formatting if possible."
]

def test_openai_vision(prompt_text, prompt_index):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OpenAI GPT-4 Vision —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    
    print(f"\nüî• OPENAI –¢–ï–°–¢ #{prompt_index + 1}")
    print(f"üìã –ü—Ä–æ–º–ø—Ç: '{prompt_text}'")
    print("-" * 80)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if not Path(IMAGE_PATH).exists():
            print(f"‚ùå –§–∞–π–ª {IMAGE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False, ""
            
        with open(IMAGE_PATH, "rb") as f:
            image_data = f.read()
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        img_b64 = base64.b64encode(image_data).decode('utf-8')
        print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(image_data)} –±–∞–π—Ç, base64: {len(img_b64)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {OPENAI_API_KEY}"
        }
        
        # Payload –¥–ª—è OpenAI Vision API
        payload = {
            "model": "gpt-4o",  # –ò–ª–∏ gpt-4-vision-preview
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": prompt_text
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/png;base64,{img_b64}"
                            }
                        }
                    ]
                }
            ],
            "max_tokens": 1000,
            "temperature": 0.1
        }
        
        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ OpenAI...")
        response = requests.post(
            OPENAI_API_URL,
            headers=headers,
            json=payload,
            timeout=30
        )
        
        print(f"üì° HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            if 'choices' in result and result['choices']:
                content = result['choices'][0]['message']['content'].strip()
                tokens = result.get('usage', {}).get('completion_tokens', 0)
                
                print(f"‚úÖ –£–°–ü–ï–•!")
                print(f"üìä –¢–æ–∫–µ–Ω–æ–≤: {tokens}")
                print(f"üìù –û—Ç–≤–µ—Ç GPT-4:")
                print("-" * 50)
                print(content)
                print("-" * 50)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                if len(content) > 20 and ("text" in content.lower() or "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏" in content.lower()):
                    print(f"üéØ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!")
                    return True, content
                else:
                    print(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    return True, content  # –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
                    
            else:
                print(f"‚ùå –ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –æ—Ç–≤–µ—Ç–µ")
                print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    return False, ""

def main():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OpenAI GPT-4 Vision –¥–ª—è OCR"""
    
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OPENAI GPT-4 VISION –î–õ–Ø OCR")
    print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {IMAGE_PATH}")
    print(f"üîó API: {OPENAI_API_URL}")
    print(f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(OCR_PROMPTS)}")
    print("=" * 100)
    
    successful_results = []
    
    for i, prompt in enumerate(OCR_PROMPTS):
        success, response_text = test_openai_vision(prompt, i)
        if success:
            successful_results.append((i + 1, prompt, response_text))
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        import time
        time.sleep(1)
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 100)
    print("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø OPENAI")
    print("=" * 100)
    
    if successful_results:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(successful_results)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for num, prompt, response in successful_results[:3]:  # –ü–µ—Ä–≤—ã–µ 3
            print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ #{num}:")
            print(f"   –ü–†–û–ú–ü–¢: '{prompt}'")
            print(f"   –û–¢–í–ï–¢: {response[:200]}{'...' if len(response) > 200 else ''}")
    else:
        print("‚ùå –ù–∏ –æ–¥–∏–Ω —Ç–µ—Å—Ç –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–∞
    if successful_results:
        best_prompt = successful_results[0][1]
        print(f"\nüéØ –õ–£–ß–®–ò–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ë–û–¢–ê:")
        print(f"'{best_prompt}'")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        print(f"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ OpenAI GPT-4 Vision API –≤–º–µ—Å—Ç–æ HuggingFace endpoint")

if __name__ == "__main__":
    main() 