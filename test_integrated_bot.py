#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ–≥–æ —Ñ–ª–æ—É: OpenAI OCR + Job Analysis
"""

import base64
import requests
import json
import os

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è (–∫–ª—é—á –∑ –æ—Ç–æ—á–µ–Ω–Ω—è)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"

def encode_image(image_path):
    """–ö–æ–¥—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ base64"""
    try:
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        return None

def extract_text_via_openai(image_path):
    """–í–∏—Ç—è–≥—É—î —Ç–µ–∫—Å—Ç –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ OpenAI"""
    print(f"üîç –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑: {image_path}")
    
    # –ö–æ–¥—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    img_b64 = encode_image(image_path)
    if not img_b64:
        return None
    
    # –ù–∞—à –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π –ø—Ä–æ–º–ø—Ç
    prompt = "I am creating an audio version of this image for someone who cannot see it. Please extract and list all the text and numbers."
    
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "gpt-4o",
        "messages": [
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": prompt
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{img_b64}"
                        }
                    }
                ]
            }
        ],
        "max_tokens": 1000,
        "temperature": 0.1
    }
    
    try:
        print("üöÄ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–ø–∏—Ç –¥–æ OpenAI...")
        response = requests.post(OPENAI_API_URL, headers=headers, json=payload, timeout=60)
        
        print(f"üì° HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            if 'choices' in result and len(result['choices']) > 0:
                content = result['choices'][0]['message']['content'].strip()
                print(f"‚úÖ –¢–µ–∫—Å—Ç –≤–∏—Ç—è–≥–Ω—É—Ç–æ, –¥–æ–≤–∂–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª—ñ–≤")
                return content
            else:
                print("‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
                return None
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ OpenAI API: {response.status_code}")
            print(f"üìÑ –¢–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏: {response.text[:500]}")
            return None
            
    except Exception as e:
        print(f"üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—ñ —Ç–µ–∫—Å—Ç—É: {e}")
        return None

def analyze_job_via_openai(extracted_text):
    """–ê–Ω–∞–ª—ñ–∑—É—î –º—ñ—Å—Ü–µ —Ä–æ–±–æ—Ç–∏ –∑ –≤–∏—Ç—è–≥–Ω—É—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç—É"""
    print(f"üéØ –ê–Ω–∞–ª—ñ–∑ –º—ñ—Å—Ü—è —Ä–æ–±–æ—Ç–∏, –¥–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É: {len(extracted_text)} —Å–∏–º–≤–æ–ª—ñ–≤")
    
    prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ –∏ –∏–∑–≤–ª–µ–∫–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã —á–µ–ª–æ–≤–µ–∫–∞.

–ú–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
  "current_job": {{
    "company": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
    "position": "–¥–æ–ª–∂–Ω–æ—Å—Ç—å", 
    "period": "–ø–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)",
    "is_current": true/false
  }},
  "found": true/false
}}

–ò—â–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: "Present", "Current", "Founder", "CEO", "Head of", –∏–ª–∏ –¥—Ä—É–≥–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—Ç—É.
–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—Ç—É, –≤–µ—Ä–Ω–∏ {{"found": false}}.

–¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
{extracted_text}
"""

    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "gpt-4o",
        "messages": [
            {
                "role": "user", 
                "content": prompt
            }
        ],
        "max_tokens": 200,
        "temperature": 0.1
    }
    
    try:
        print("üöÄ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–ø–∏—Ç –∞–Ω–∞–ª—ñ–∑—É —Ä–æ–±–æ—Ç–∏...")
        response = requests.post(OPENAI_API_URL, headers=headers, json=payload, timeout=30)
        
        print(f"üì° HTTP —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª—ñ–∑—É: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            if 'choices' in result and len(result['choices']) > 0:
                content = result['choices'][0]['message']['content'].strip()
                print(f"‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –¥–æ–≤–∂–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª—ñ–≤")
                return content
            else:
                print("‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–Ω–∞–ª—ñ–∑—É")
                return None
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ OpenAI API –∞–Ω–∞–ª—ñ–∑—É: {response.status_code}")
            print(f"üìÑ –¢–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏: {response.text[:500]}")
            return None
            
    except Exception as e:
        print(f"üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —Ä–æ–±–æ—Ç–∏: {e}")
        return None

def test_full_workflow():
    """–¢–µ—Å—Ç—É—î –ø–æ–≤–Ω–∏–π —Ñ–ª–æ—É"""
    print("=" * 80)
    print("–¢–ï–°–¢ –ü–û–í–ù–û–ì–û –§–õ–û–£: OCR + –ê–ù–ê–õ–Ü–ó –†–û–ë–û–¢–ò")
    print("=" * 80)
    
    # –¢–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    image_path = "screenshot_2025-07-15T13-58-11-498Z.jpg"
    
    # –ö—Ä–æ–∫ 1: –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
    print("\nüîç –ö–†–û–ö 1: –í–ò–¢–Ø–ì–£–í–ê–ù–ù–Ø –¢–ï–ö–°–¢–£")
    print("-" * 40)
    ocr_result = extract_text_via_openai(image_path)
    
    if not ocr_result:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ —Ç–µ–∫—Å—Ç")
        return
    
    print(f"üìù –í–∏—Ç—è–≥–Ω—É—Ç–∏–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤):")
    print(ocr_result[:200] + "..." if len(ocr_result) > 200 else ocr_result)
    
    # –ö—Ä–æ–∫ 2: –ê–Ω–∞–ª—ñ–∑ —Ä–æ–±–æ—Ç–∏
    print("\nüéØ –ö–†–û–ö 2: –ê–ù–ê–õ–Ü–ó –ú–Ü–°–¶–Ø –†–û–ë–û–¢–ò")
    print("-" * 40)
    job_analysis = analyze_job_via_openai(ocr_result)
    
    if job_analysis:
        print(f"üìä –ê–Ω–∞–ª—ñ–∑ —Ä–æ–±–æ—Ç–∏:")
        print(job_analysis)
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ —Ä–æ–±–æ—Ç–∏")
    
    # –ö—Ä–æ–∫ 3: –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É (—è–∫ —É –±–æ—Ç—ñ)
    print("\nüìã –ö–†–û–ö 3: –§–Ü–ù–ê–õ–¨–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("-" * 40)
    
    final_response = f"üìã **–í–ò–¢–Ø–ì–ù–£–¢–ò–ô –¢–ï–ö–°–¢:**\n{ocr_result}\n\n"
    
    if job_analysis:
        final_response += f"üíº **–ê–ù–ê–õ–Ü–ó –ú–Ü–°–¶–Ø –†–û–ë–û–¢–ò:**\n{job_analysis}"
    else:
        final_response += "üíº **–ê–ù–ê–õ–Ü–ó –ú–Ü–°–¶–Ø –†–û–ë–û–¢–ò:**\n–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ü–µ —Ä–æ–±–æ—Ç–∏"
    
    print(f"üìè –î–æ–≤–∂–∏–Ω–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {len(final_response)} —Å–∏–º–≤–æ–ª—ñ–≤")
    
    if len(final_response) > 4000:
        print("‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–≤—à–µ –∑–∞ 4000 —Å–∏–º–≤–æ–ª—ñ–≤ - –±—É–¥–µ —Ä–æ–∑–¥—ñ–ª–µ–Ω–æ")
    else:
        print("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–º—ñ—Å—Ç–∏—Ç—Å—è –≤ –æ–¥–∏–Ω Telegram message")
    
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)

if __name__ == "__main__":
    test_full_workflow() 