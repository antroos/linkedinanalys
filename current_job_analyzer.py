#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ OpenAI API
–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—Ç—É –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
"""

import sqlite3
import requests
import json
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI (–∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"

def extract_current_job_via_openai(response_text, analysis_id):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ OpenAI API"""
    
    prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ –∏ –∏–∑–≤–ª–µ–∫–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã —á–µ–ª–æ–≤–µ–∫–∞.

–ú–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
  "current_job": {{
    "company": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
    "position": "–¥–æ–ª–∂–Ω–æ—Å—Ç—å", 
    "period": "–ø–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)",
    "is_current": true/false
  }},
  "found": true/false
}}

–ò—â–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: "Present", "Current", "Founder", "CEO", "Head of", –∏–ª–∏ –¥—Ä—É–≥–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—Ç—É.
–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—Ç—É, –≤–µ—Ä–Ω–∏ {{"found": false}}.

–¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
{response_text}
"""

    try:
        headers = {
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "gpt-4o",
            "messages": [
                {
                    "role": "user", 
                    "content": prompt
                }
            ],
            "max_tokens": 300,
            "temperature": 0.1
        }
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –≤ –∞–Ω–∞–ª–∏–∑–µ #{analysis_id}...")
        response = requests.post(OPENAI_API_URL, headers=headers, json=payload, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            ai_response = result['choices'][0]['message']['content'].strip()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
            try:
                # –£–±–∏—Ä–∞–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                cleaned_response = ai_response.strip()
                if cleaned_response.startswith("```json"):
                    cleaned_response = cleaned_response.replace("```json", "").replace("```", "").strip()
                elif cleaned_response.startswith("```"):
                    cleaned_response = cleaned_response.replace("```", "").strip()
                
                job_data = json.loads(cleaned_response)
                return job_data
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ #{analysis_id}")
                print(f"–û—Ç–≤–µ—Ç OpenAI: {ai_response}")
                return {"found": False, "error": "JSON parse failed", "raw_response": ai_response}
        
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {response.status_code}")
            return {"found": False, "error": f"API error {response.status_code}"}
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ #{analysis_id}: {e}")
        return {"found": False, "error": str(e)}

def analyze_all_jobs():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—Ç—É –≤–æ –≤—Å–µ—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ö"""
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('image_analysis_results.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
    cursor.execute('''
        SELECT analysis_id, response_text
        FROM analysis_results 
        WHERE status = 'SUCCESS'
        ORDER BY analysis_id
    ''')
    
    results = cursor.fetchall()
    conn.close()
    
    print("üè¢ –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ò–• –ú–ï–°–¢ –†–ê–ë–û–¢–´")
    print("="*80)
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —É—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    job_extractions = []
    
    for result in results:
        analysis_id, response_text = result
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ —á–µ—Ä–µ–∑ OpenAI
        job_info = extract_current_job_via_openai(response_text, analysis_id)
        
        job_extractions.append({
            "analysis_id": analysis_id,
            "job_info": job_info,
            "timestamp": datetime.now().isoformat()
        })
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìã –ê–ù–ê–õ–ò–ó #{analysis_id}:")
        if job_info.get("found", False):
            current_job = job_info.get("current_job", {})
            print(f"   üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {current_job.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            print(f"   üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å: {current_job.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {current_job.get('period', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   ‚úÖ –¢–µ–∫—É—â–∞—è: {current_job.get('is_current', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            print(f"   ‚ùå –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            if "error" in job_info:
                print(f"   üî¥ –û—à–∏–±–∫–∞: {job_info['error']}")
    
    return job_extractions

def compare_job_changes(job_extractions):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏"""
    
    print(f"\n{'='*80}")
    print("üîÑ –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –†–ê–ë–û–¢–ï")
    print("="*80)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
    found_jobs = [job for job in job_extractions if job["job_info"].get("found", False)]
    
    if len(found_jobs) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—Å–ø–µ—à–Ω—ã—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏—è)")
        return
    
    print(f"üìä –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º {len(found_jobs)} –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç —Ä–∞–±–æ—Ç—ã:")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    companies = []
    positions = []
    
    for job in found_jobs:
        current_job = job["job_info"]["current_job"]
        company = current_job.get("company", "").strip().lower()
        position = current_job.get("position", "").strip().lower()
        
        if company:
            companies.append((job["analysis_id"], company))
        if position:
            positions.append((job["analysis_id"], position))
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏
    print(f"\nüè¢ –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–ú–ü–ê–ù–ò–ò:")
    unique_companies = list(set([comp[1] for comp in companies]))
    
    if len(unique_companies) == 1:
        print(f"   ‚úÖ –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –º–µ–Ω—è–ª–∞—Å—å: {unique_companies[0]}")
    else:
        print(f"   üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(unique_companies)} —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π:")
        for i, company in enumerate(unique_companies, 1):
            analyses = [comp[0] for comp in companies if comp[1] == company]
            print(f"      {i}. '{company}' (–∞–Ω–∞–ª–∏–∑—ã: {', '.join(map(str, analyses))})")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    print(f"\nüëî –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –î–û–õ–ñ–ù–û–°–¢–ò:")
    unique_positions = list(set([pos[1] for pos in positions]))
    
    if len(unique_positions) == 1:
        print(f"   ‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –º–µ–Ω—è–ª–∞—Å—å: {unique_positions[0]}")
    else:
        print(f"   üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(unique_positions)} —Ä–∞–∑–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π:")
        for i, position in enumerate(unique_positions, 1):
            analyses = [pos[0] for pos in positions if pos[1] == position]
            print(f"      {i}. '{position}' (–∞–Ω–∞–ª–∏–∑—ã: {', '.join(map(str, analyses))})")

def save_job_analysis_results(job_extractions):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON —Ñ–∞–π–ª"""
    
    output_data = {
        "analysis_timestamp": datetime.now().isoformat(),
        "total_analyses": len(job_extractions),
        "successful_extractions": len([job for job in job_extractions if job["job_info"].get("found", False)]),
        "job_extractions": job_extractions
    }
    
    filename = f"job_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(output_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
    return filename

def create_summary_report(job_extractions):
    """–°–æ–∑–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    
    found_jobs = [job for job in job_extractions if job["job_info"].get("found", False)]
    
    print(f"\n{'='*80}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*80)
    
    print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(job_extractions)}")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞: {len(found_jobs)}")
    print(f"   ‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å: {len(job_extractions) - len(found_jobs)}")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {len(found_jobs)/len(job_extractions)*100:.1f}%")
    
    if found_jobs:
        # –°–∞–º–∞—è —á–∞—Å—Ç–∞—è –∫–æ–º–ø–∞–Ω–∏—è
        companies = [job["job_info"]["current_job"].get("company", "").strip().lower() 
                    for job in found_jobs if job["job_info"]["current_job"].get("company")]
        
        if companies:
            from collections import Counter
            company_counts = Counter(companies)
            most_common_company = company_counts.most_common(1)[0]
            
            print(f"\nüè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–π: {len(companies)}")
            print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {len(set(companies))}")
            print(f"   ‚Ä¢ –°–∞–º–∞—è —á–∞—Å—Ç–∞—è: '{most_common_company[0]}' ({most_common_company[1]} —Ä–∞–∑)")
            
            if len(set(companies)) > 1:
                print(f"   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞–∑–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏! –í–æ–∑–º–æ–∂–Ω–∞ —Å–º–µ–Ω–∞ —Ä–∞–±–æ—Ç—ã.")
            else:
                print(f"   ‚úÖ –ö–æ–º–ø–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–∞ –≤–æ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∞—Ö")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üè¢ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¢–ï–ö–£–©–ï–ì–û –ú–ï–°–¢–ê –†–ê–ë–û–¢–´")
    print("="*60)
    print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI API –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–µ")
    print("–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print()
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã
        job_extractions = analyze_all_jobs()
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        compare_job_changes(job_extractions)
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        create_summary_report(job_extractions)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        filename = save_job_analysis_results(job_extractions)
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìÅ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {filename}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")

if __name__ == "__main__":
    main() 