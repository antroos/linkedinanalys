#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
"""

import requests
import base64
import json
import os
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
HUGGINGFACE_TOKEN = os.getenv("HUGGINGFACE_TOKEN", "")
HUGGINGFACE_ENDPOINT = os.getenv("HUGGINGFACE_ENDPOINT", "https://example.huggingface.cloud/invocations")

# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
IMAGE_PATH = "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-07-16 –≤ 01.41.27.png"

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
PROMPTS_TO_TEST = [
    "What text do you see in this image?",
    "Read all text from this image.",
    "Extract all visible text from this image.",
    "List all text, words, and numbers visible in this image.",
    "Transcribe all text content from this image.",
    "What words and text are written in this image?",
    "Please read and list every text element you can see.",
    "Perform OCR on this image and list all text.",
    "USER: Extract all text from this image.\nASSISTANT:",
    "Human: What text is visible in this image?\nAssistant:",
    "Image contains text. Read it all.",
    "Describe all text content in this image.",
    "–ù–∞–π–¥–∏ –∏ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.",
    "–ö–∞–∫–æ–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ?"
]

def test_prompt_with_real_image(prompt_text, prompt_index):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    
    print(f"\nüß™ –¢–ï–°–¢ #{prompt_index + 1}")
    print(f"üìã –ü—Ä–æ–º–ø—Ç: '{prompt_text}'")
    print("-" * 60)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if not Path(IMAGE_PATH).exists():
            print(f"‚ùå –§–∞–π–ª {IMAGE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        with open(IMAGE_PATH, "rb") as f:
            image_data = f.read()
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        img_b64 = base64.b64encode(image_data).decode('utf-8')
        print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(image_data)} –±–∞–π—Ç, base64: {len(img_b64)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        headers = {
            "Authorization": f"Bearer {HUGGINGFACE_TOKEN}",
            "Content-Type": "application/json"
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º payload
        payload = {
            "image": img_b64,
            "prompt": prompt_text,
            "max_tokens": 300,
            "temperature": 0.1,
            "top_p": 0.9
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å...")
        response = requests.post(
            HUGGINGFACE_ENDPOINT,
            headers=headers,
            json=payload,
            timeout=30
        )
        
        print(f"üì° HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            if 'choices' in result and result['choices']:
                text = result['choices'][0].get('text', '').strip()
                tokens = result.get('usage', {}).get('completion_tokens', 0)
                
                print(f"‚úÖ –£–°–ü–ï–•!")
                print(f"üìä –¢–æ–∫–µ–Ω–æ–≤: {tokens}")
                print(f"üìù –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
                print(f"    '{text}'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
                if len(text) > 20 and not text.startswith('and ') and not text.startswith('including '):
                    print(f"üéØ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
                    return True
                else:
                    print(f"‚ö†Ô∏è –ö–æ—Ä–æ—Ç–∫–∏–π/—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç")
                    
            else:
                print(f"‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    return False

def main():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã"""
    
    print("üî• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ú–ü–¢–û–í –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê")
    print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {IMAGE_PATH}")
    print(f"üîó Endpoint: {HUGGINGFACE_ENDPOINT}")
    print(f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(PROMPTS_TO_TEST)}")
    print("=" * 80)
    
    successful_prompts = []
    
    for i, prompt in enumerate(PROMPTS_TO_TEST):
        success = test_prompt_with_real_image(prompt, i)
        if success:
            successful_prompts.append((i + 1, prompt))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 80)
    print("üèÜ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    
    if successful_prompts:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤: {len(successful_prompts)}")
        for num, prompt in successful_prompts:
            print(f"   #{num}: '{prompt}'")
    else:
        print(f"‚ùå –ù–∏ –æ–¥–∏–Ω –ø—Ä–æ–º–ø—Ç –Ω–µ –¥–∞–ª —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    
    print(f"\nüìä –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(PROMPTS_TO_TEST)} –ø—Ä–æ–º–ø—Ç–æ–≤")

if __name__ == "__main__":
    main() 